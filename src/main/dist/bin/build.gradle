import groovy.xml.XmlUtil
import org.silverpeas.setup.api.Logger
import org.silverpeas.setup.configuration.JBossServer

import java.util.regex.Matcher
import java.util.regex.Pattern

description = 'Distribution of Silverpeas. Its aim is to setup and to execute a Silverpeas installation'
group = 'org.silverpeas'

apply from: "${System.getenv('SILVERPEAS_HOME')}/bin/silverpeas.gradle"
apply plugin: 'maven'
apply plugin: 'silversetup'

repositories {
  mavenLocal()
  maven {
    url 'http://www.silverpeas.org/nexus/content/groups/silverpeas'
  }
  flatDir {
    dirs 'lib'
  }
}

buildscript {
  dependencies {
    classpath "org.silverpeas:silverpeas-setup:${project.version}"
    classpath fileTree(dir: 'lib', include: ['*.jar'])
  }
  repositories {
    mavenLocal()
    maven {
      url 'http://www.silverpeas.org/nexus/content/groups/silverpeas'
    }
    flatDir {
      dirs 'lib'
    }
  }
}

/**
 * Some configuration properties corresponding to this distribution.
 */
silversetup {
  driversDir = "${buildDir}/drivers"
  logging {
    logDir = "${project.silversetup.silverpeasHome}/log"
    defaultLevel = project.logLevel
    scriptTasks = ['assemble', 'configure', 'install']
  }
}

/**
 * Global project properties.
 */
project.ext {
  jackrabbitJCAUri = 'http://www.silverpeas.org/files/jackrabbit-jca.rar'
  distDir = new File('dist', buildDir)
  deploymentsHome = new File("${project.silversetup.silverpeasHome}/deployments")
  jbossOutputLog = new File("${project.silversetup.logging.logDir}/jboss_output.log")
}

/**
 * Cleans all the artifacts produced by the build of a Silverpeas distribution.
 */
clean {
  doLast {
    ant.delete(dir: "${silversetup.silverpeasHome}/log", includes: '*.log')
    ant.delete(dir: "${silversetup.silverpeasHome}/silvertrace", includeemptydirs: true)
    ant.delete(dir: "${silversetup.silverpeasHome}/migrations", includeemptydirs: true)
    ant.delete(dir: "${silversetup.silverpeasHome}/dbRepository", includeemptydirs: true)
    ant.delete(dir: "${silversetup.silverpeasHome}/resources/StringTemplates", includeemptydirs: true)
    ant.delete(dir: "${silversetup.silverpeasHome}/properties", includeemptydirs: true,
        excludes: 'org/silverpeas/authentication/**/* org/silverpeas/domains/**/* org/silverpeas/util/viewGenerator/settings/**/*')
    ant.delete(dir: "${silversetup.silverpeasHome}/xmlcomponents", includeemptydirs: true,
        excludes: 'workflows/**/*')
  }
}

/**
 * Fetches the different parts of Silverpeas as well their dependencies from the remote Silverpeas
 * repository and prepares the build of the Silverpeas distribution. It is in this step the
 * Silverpeas application is assembled.
 */
assemble {
  outputs.dir distDir
  outputs.dir file(new File(project.silversetup.driversDir))
  outputs.file file(new File('silverpeas.war', buildDir))
  Logger log = Logger.getLogger('assemble')
  doFirst {
    // fetch all the artifacts and explode some of them into the output directories
    Pattern pattern = ~/([a-zA-Z_\-]+)(-[0-9.]+[a-zA-Z0-9_\-.]*)(\.\w+)/
    def artifacts = configurations.silverpeas.files
    artifacts.each { a ->
      if (a.name.endsWith('.war')) {
        log.info "Explode ${a.name} into ${distDir.path}"
        copy {
          from(zipTree(a)) {
            rename 'web.xml', "web-${a.name}.xml"
          }
          into distDir.path
        }
      } else if (a.name.endsWith('-configuration.jar')) {
        logger.info "Explode ${a.name} into ${project.silversetup.silverpeasHome}"
        copy {
          from(zipTree(a))
          exclude '**/META-INF/**'
          into project.silversetup.silverpeasHome
        }
      } else if (a.name.startsWith('postgresql') || a.name.startsWith('jtds') ||
          a.name.startsWith('ojdbc')) {
        log.info "JDBC driver found: ${a.name}"
        // h2 is already provided by JBoss >= 8
        copy {
          from(file(a)) {
            String nameWithoutVersion = a.name
            Matcher matching = pattern.matcher(a.name)
            matching.each {
              nameWithoutVersion = it[1] + it[3]
            }
            rename a.name, nameWithoutVersion
          }
          into project.silversetup.driversDir
        }
      } else if (a.name.endsWith('.rar')) {
        log.info "JCA found: ${a.name}"
        copy {
          from(file(a)) {
            String nameWithoutVersion = a.name
            Matcher matching = pattern.matcher(a.name)
            matching.each {
              nameWithoutVersion = it[1] + it[3]
            }
            rename a.name, nameWithoutVersion
          }
          into buildDir
        }
      }
    }
  }
  doLast {
    // merge all of the web.xml from the different WARs into a single one
    log.info "Merge all the web.xml into a single one"
    def mainWebXmlFileName = "web-war-core-${project.version}.war.xml"
    def mainWebXmlFile = new File("${distDir.path}/WEB-INF/${mainWebXmlFileName}")
    def mainWebXml = new XmlSlurper(false, false).parse(mainWebXmlFile)
    new File('WEB-INF', distDir).listFiles(new FilenameFilter() {
      boolean accept(File f, String fileName) {
        return fileName.startsWith('web-') && fileName.endsWith('war.xml') &&
            fileName != mainWebXmlFileName
      }
    }).each {
      // the sub-elements of the web-app elements can be in the arbitrary order.
      def aWebXml = new XmlSlurper(false, false).parse(it)
      aWebXml.'context-param'.each { elt -> mainWebXml.appendNode(elt) }
      aWebXml.'filter'.each { elt -> mainWebXml.appendNode(elt) }
      aWebXml.'listener'.each { elt -> mainWebXml.appendNode(elt) }
      aWebXml.'servlet'.each { elt -> mainWebXml.appendNode(elt) }
      aWebXml.'servlet-mapping'.each { elt -> mainWebXml.appendNode(elt) }
      aWebXml.'resource-env-ref'.each { elt -> mainWebXml.appendNode(elt) }
      GFileUtils.forceDelete(it)
    }
    XmlUtil.serialize(mainWebXml, new FileWriter("${distDir.path}/WEB-INF/web.xml"))
    GFileUtils.forceDelete(mainWebXmlFile)

    // generate the final persistence.xml in which each Silverpeas components are referenced as a
    // JPA entities provider
    log.info "Update the persistence.xml with all the providers of JPA entities"
    File xmlPersistenceFile = new File('WEB-INF/classes/META-INF/persistence.xml', distDir)
    def persistence = new XmlSlurper(false, false).parse(xmlPersistenceFile)
    new File('WEB-INF/lib', distDir).list(new FilenameFilter() {
      @Override
      boolean accept(final File dir, final String name) {
        return name.endsWith("''${project.version}.jar")
      }
    }).each { jpaComponent ->
      persistence.'persistence-unit'.'jta-data-source' + {
        'jar-file'("lib/${jpaComponent}")
      }
    }
    XmlUtil.serialize(persistence, new FileWriter(xmlPersistenceFile.path))

    log.info "Generate silverpeas.war"
    ant.zip(destfile: "${buildDir.path}/silverpeas.war") {
      fileset(dir: distDir.path)
    }
  }
}

/**
 * Configures both the runtime (JBoss) and the Silverpeas distribution.
 */
task configure(dependsOn: assemble) {
  description 'Configures both JBoss and Silverpeas'
  group 'Build'
  Logger log = Logger.getLogger(this.name)
  doFirst {
    if (deploymentsHome.exists()) {
      JBossServer jboss = new JBossServer(project.silversetup.jbossHome)
          .redirectOutputTo(jbossOutputLog)
          .useLogger(log)
      deploymentsHome.listFiles().each { artifact ->
        log.info "Uninstall ${artifact.name}"
        jboss.undeploy(artifact.name)
        log.info "Uninstall ${artifact.name}: [OK]"
      }
    }
  }
  doLast {
    tasks.configureJBoss.execute()
    tasks.configureSilverpeas.execute()
  }
}

task install(dependsOn: [configure, migration]) {
  description 'Installs Silverpeas into JBoss'
  group 'Build'
  Logger log = Logger.getLogger(this.name)
  JBossServer jboss = new JBossServer(project.silversetup.jbossHome)
      .redirectOutputTo(jbossOutputLog)
      .useLogger(log)
  doFirst {
    /*
     * There is a bug with the Wildfly reloading: it breaks out the MDB deployment!
     * So, in the case there were a reload during the configuration, we stop JBoss/Wildfly before
     * deploying any artifact.
     */
    if (jboss.isStartingOrRunning()) {
      jboss.stop()
    }
  }
  doLast {
    copy {
      from(fileTree(buildDir))
      include '*.rar'
      include '*.jar'
      include '*.war'
      into deploymentsHome
    }
    try {
      deploymentsHome.listFiles().each { artifact ->
        log.info "Installation of ${artifact.name}"
        jboss.deploy(artifact.path)
        log.info "Installation of ${artifact.name}: [OK]"
      }
    } catch (RuntimeException ex) {
      throw new GradleScriptException("Installation Failure", ex)
    }
  }
}

/**
 * Starts Silverpeas.
 */
task start {
  description 'Starts Silverpeas'
  group 'Silverpeas'
  doLast {
    new JBossServer(project.silversetup.jbossHome)
        .redirectOutputTo(jbossOutputLog)
        .start()
  }
}

/**
 * Starts Silverpeas in debug mode.
 */
task debug {
  description 'Starts Silverpeas in debug mode'
  group 'Silverpeas'
  doLast {
    int debuggingPort = (project.hasProperty('port') ? port as int:5005)
    new JBossServer(project.silversetup.jbossHome)
        .redirectOutputTo(jbossOutputLog)
        .debug(debuggingPort)
  }
}

/**
 * Stops Silverpeas.
 */
task stop {
  description 'Stops Silverpeas'
  group 'Silverpeas'
  doLast {
    new JBossServer(project.silversetup.jbossHome)
        .redirectOutputTo(jbossOutputLog)
        .stop()
  }
}

/**
 * Checks the status of the Silverpeas distribution.
 */
task status {
  description 'Checks the status of Silverpeas: is it running? is it well configured?'
  group 'Silverpeas'
  doLast {
    def jboss = new JBossServer(project.silversetup.jbossHome)
    String configurationStatus = (jboss.isAlreadyConfigured() ? 'Configured: [OK]' : 'Configured: [NOK]')
    String executionStatus = (jboss.isRunning() ? 'Running:    [OK]' : 'Running:    [NOK]')
    String deploymentStatus = (jboss.isRunning() && jboss.isDeployed('silverpeas.war') ? 'Active:     [OK]' : 'Active:     [NOK]')
    println configurationStatus
    println executionStatus
    println deploymentStatus
  }
}




